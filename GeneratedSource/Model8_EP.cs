// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 11:50 AM on Monday, December 5, 2022.
	/// </remarks>
	public partial class Model8_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'vbool100'</summary>
		public Bernoulli vbool100_marginal_F;
		/// <summary>Message to marginal of 'vbool101'</summary>
		public Bernoulli vbool101_marginal_F;
		/// <summary>Message to marginal of 'vbool102'</summary>
		public Bernoulli vbool102_marginal_F;
		/// <summary>Message to marginal of 'vbool103'</summary>
		public Bernoulli vbool103_marginal_F;
		/// <summary>Message to marginal of 'vbool104'</summary>
		public Bernoulli vbool104_marginal_F;
		/// <summary>Message to marginal of 'vbool105'</summary>
		public Bernoulli vbool105_marginal_F;
		/// <summary>Message to marginal of 'vbool106'</summary>
		public Bernoulli vbool106_marginal_F;
		/// <summary>Message to marginal of 'vbool107'</summary>
		public Bernoulli vbool107_marginal_F;
		/// <summary>Message to marginal of 'vbool108'</summary>
		public Bernoulli vbool108_marginal_F;
		/// <summary>Message to marginal of 'vbool109'</summary>
		public Bernoulli vbool109_marginal_F;
		/// <summary>Message to marginal of 'vbool110'</summary>
		public Bernoulli vbool110_marginal_F;
		/// <summary>Message to marginal of 'vbool111'</summary>
		public Bernoulli vbool111_marginal_F;
		/// <summary>Message to marginal of 'vbool112'</summary>
		public Bernoulli vbool112_marginal_F;
		/// <summary>Message to marginal of 'vbool113'</summary>
		public Bernoulli vbool113_marginal_F;
		/// <summary>Message to marginal of 'vbool114'</summary>
		public Bernoulli vbool114_marginal_F;
		/// <summary>Message to marginal of 'vbool115'</summary>
		public Bernoulli vbool115_marginal_F;
		/// <summary>Message to marginal of 'vbool97'</summary>
		public Bernoulli vbool97_marginal_F;
		/// <summary>Message to marginal of 'vbool98'</summary>
		public Bernoulli vbool98_marginal_F;
		/// <summary>Message to marginal of 'vbool99'</summary>
		public Bernoulli vbool99_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			Bernoulli vBernoulli61 = Bernoulli.FromLogOdds(double.NegativeInfinity);
			this.vbool97_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool97_use_B = Bernoulli.Uniform();
			// Message to 'vbool97_marginal' from Variable factor
			this.vbool97_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(vbool97_use_B, vBernoulli61, this.vbool97_marginal_F);
			Bernoulli vBernoulli62 = Bernoulli.Uniform();
			this.vbool98_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool99_F = default(Bernoulli);
			this.vbool99_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool99_use_B = Bernoulli.Uniform();
			// Message to 'vbool99' from Or factor
			vbool99_F = BooleanOrOp.OrAverageConditional(vBernoulli61, vBernoulli62);
			// Message to 'vbool99_marginal' from DerivedVariable factor
			this.vbool99_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool99_use_B, vbool99_F, this.vbool99_marginal_F);
			this.vbool100_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool101_F = default(Bernoulli);
			this.vbool101_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool101_use_B = Bernoulli.Uniform();
			// Message to 'vbool101' from Or factor
			vbool101_F = BooleanOrOp.OrAverageConditional(vbool99_F, vBernoulli62);
			// Message to 'vbool101_marginal' from DerivedVariable factor
			this.vbool101_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool101_use_B, vbool101_F, this.vbool101_marginal_F);
			this.vbool102_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool103_F = default(Bernoulli);
			this.vbool103_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool103_use_B = Bernoulli.Uniform();
			// Message to 'vbool103' from Or factor
			vbool103_F = BooleanOrOp.OrAverageConditional(vbool101_F, vBernoulli62);
			// Message to 'vbool103_marginal' from DerivedVariable factor
			this.vbool103_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool103_use_B, vbool103_F, this.vbool103_marginal_F);
			this.vbool104_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool105_F = default(Bernoulli);
			this.vbool105_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool105_use_B = Bernoulli.Uniform();
			// Message to 'vbool105' from Or factor
			vbool105_F = BooleanOrOp.OrAverageConditional(vbool103_F, vBernoulli62);
			// Message to 'vbool105_marginal' from DerivedVariable factor
			this.vbool105_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool105_use_B, vbool105_F, this.vbool105_marginal_F);
			this.vbool106_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool107_F = default(Bernoulli);
			this.vbool107_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool107_use_B = Bernoulli.Uniform();
			// Message to 'vbool107' from Or factor
			vbool107_F = BooleanOrOp.OrAverageConditional(vbool105_F, vBernoulli62);
			// Message to 'vbool107_marginal' from DerivedVariable factor
			this.vbool107_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool107_use_B, vbool107_F, this.vbool107_marginal_F);
			this.vbool108_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool109_F = default(Bernoulli);
			this.vbool109_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool109_use_B = Bernoulli.Uniform();
			// Message to 'vbool109' from Or factor
			vbool109_F = BooleanOrOp.OrAverageConditional(vbool107_F, vBernoulli62);
			// Message to 'vbool109_marginal' from DerivedVariable factor
			this.vbool109_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool109_use_B, vbool109_F, this.vbool109_marginal_F);
			this.vbool110_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool111_F = default(Bernoulli);
			this.vbool111_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool111_use_B = Bernoulli.Uniform();
			// Message to 'vbool111' from Or factor
			vbool111_F = BooleanOrOp.OrAverageConditional(vbool109_F, vBernoulli62);
			// Message to 'vbool111_marginal' from DerivedVariable factor
			this.vbool111_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool111_use_B, vbool111_F, this.vbool111_marginal_F);
			this.vbool112_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool113_F = default(Bernoulli);
			this.vbool113_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool113_use_B = Bernoulli.Uniform();
			// Message to 'vbool113' from Or factor
			vbool113_F = BooleanOrOp.OrAverageConditional(vbool111_F, vBernoulli62);
			// Message to 'vbool113_marginal' from DerivedVariable factor
			this.vbool113_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool113_use_B, vbool113_F, this.vbool113_marginal_F);
			this.vbool114_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool115_F = default(Bernoulli);
			this.vbool115_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool115_use_B = Bernoulli.Uniform();
			// Message to 'vbool115' from Or factor
			vbool115_F = BooleanOrOp.OrAverageConditional(vbool113_F, vBernoulli62);
			// Message to 'vbool115_marginal' from DerivedVariable factor
			this.vbool115_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool115_use_B, vbool115_F, this.vbool115_marginal_F);
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Constant();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vbool97") {
				return this.Vbool97Marginal();
			}
			if (variableName=="vbool98") {
				return this.Vbool98Marginal();
			}
			if (variableName=="vbool99") {
				return this.Vbool99Marginal();
			}
			if (variableName=="vbool100") {
				return this.Vbool100Marginal();
			}
			if (variableName=="vbool101") {
				return this.Vbool101Marginal();
			}
			if (variableName=="vbool102") {
				return this.Vbool102Marginal();
			}
			if (variableName=="vbool103") {
				return this.Vbool103Marginal();
			}
			if (variableName=="vbool104") {
				return this.Vbool104Marginal();
			}
			if (variableName=="vbool105") {
				return this.Vbool105Marginal();
			}
			if (variableName=="vbool106") {
				return this.Vbool106Marginal();
			}
			if (variableName=="vbool107") {
				return this.Vbool107Marginal();
			}
			if (variableName=="vbool108") {
				return this.Vbool108Marginal();
			}
			if (variableName=="vbool109") {
				return this.Vbool109Marginal();
			}
			if (variableName=="vbool110") {
				return this.Vbool110Marginal();
			}
			if (variableName=="vbool111") {
				return this.Vbool111Marginal();
			}
			if (variableName=="vbool112") {
				return this.Vbool112Marginal();
			}
			if (variableName=="vbool113") {
				return this.Vbool113Marginal();
			}
			if (variableName=="vbool114") {
				return this.Vbool114Marginal();
			}
			if (variableName=="vbool115") {
				return this.Vbool115Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool100' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool100Marginal()
		{
			return this.vbool100_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool101' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool101Marginal()
		{
			return this.vbool101_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool102' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool102Marginal()
		{
			return this.vbool102_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool103' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool103Marginal()
		{
			return this.vbool103_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool104' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool104Marginal()
		{
			return this.vbool104_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool105' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool105Marginal()
		{
			return this.vbool105_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool106' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool106Marginal()
		{
			return this.vbool106_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool107' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool107Marginal()
		{
			return this.vbool107_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool108' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool108Marginal()
		{
			return this.vbool108_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool109' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool109Marginal()
		{
			return this.vbool109_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool110' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool110Marginal()
		{
			return this.vbool110_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool111' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool111Marginal()
		{
			return this.vbool111_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool112' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool112Marginal()
		{
			return this.vbool112_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool113' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool113Marginal()
		{
			return this.vbool113_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool114' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool114Marginal()
		{
			return this.vbool114_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool115' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool115Marginal()
		{
			return this.vbool115_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool97' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool97Marginal()
		{
			return this.vbool97_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool98' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool98Marginal()
		{
			return this.vbool98_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool99' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool99Marginal()
		{
			return this.vbool99_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
