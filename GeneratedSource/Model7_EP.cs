// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 11:50 AM on Monday, December 5, 2022.
	/// </remarks>
	public partial class Model7_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'vbool79'</summary>
		public Bernoulli vbool79_marginal_F;
		/// <summary>Message to marginal of 'vbool80'</summary>
		public Bernoulli vbool80_marginal_F;
		/// <summary>Message to marginal of 'vbool81'</summary>
		public Bernoulli vbool81_marginal_F;
		/// <summary>Message to marginal of 'vbool82'</summary>
		public Bernoulli vbool82_marginal_F;
		/// <summary>Message to marginal of 'vbool83'</summary>
		public Bernoulli vbool83_marginal_F;
		/// <summary>Message to marginal of 'vbool84'</summary>
		public Bernoulli vbool84_marginal_F;
		/// <summary>Message to marginal of 'vbool85'</summary>
		public Bernoulli vbool85_marginal_F;
		/// <summary>Message to marginal of 'vbool86'</summary>
		public Bernoulli vbool86_marginal_F;
		/// <summary>Message to marginal of 'vbool87'</summary>
		public Bernoulli vbool87_marginal_F;
		/// <summary>Message to marginal of 'vbool88'</summary>
		public Bernoulli vbool88_marginal_F;
		/// <summary>Message to marginal of 'vbool89'</summary>
		public Bernoulli vbool89_marginal_F;
		/// <summary>Message to marginal of 'vbool90'</summary>
		public Bernoulli vbool90_marginal_F;
		/// <summary>Message to marginal of 'vbool91'</summary>
		public Bernoulli vbool91_marginal_F;
		/// <summary>Message to marginal of 'vbool92'</summary>
		public Bernoulli vbool92_marginal_F;
		/// <summary>Message to marginal of 'vbool93'</summary>
		public Bernoulli vbool93_marginal_F;
		/// <summary>Message to marginal of 'vbool94'</summary>
		public Bernoulli vbool94_marginal_F;
		/// <summary>Message to marginal of 'vbool95'</summary>
		public Bernoulli vbool95_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			Bernoulli vBernoulli51 = Bernoulli.FromLogOdds(double.NegativeInfinity);
			this.vbool79_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool79_use_B = Bernoulli.Uniform();
			// Message to 'vbool79_marginal' from Variable factor
			this.vbool79_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(vbool79_use_B, vBernoulli51, this.vbool79_marginal_F);
			Bernoulli vBernoulli52 = Bernoulli.Uniform();
			this.vbool80_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool81_F = default(Bernoulli);
			this.vbool81_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool81_use_B = Bernoulli.Uniform();
			// Message to 'vbool81' from Or factor
			vbool81_F = BooleanOrOp.OrAverageConditional(vBernoulli51, vBernoulli52);
			// Message to 'vbool81_marginal' from DerivedVariable factor
			this.vbool81_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool81_use_B, vbool81_F, this.vbool81_marginal_F);
			this.vbool82_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool83_F = default(Bernoulli);
			this.vbool83_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool83_use_B = Bernoulli.Uniform();
			// Message to 'vbool83' from Or factor
			vbool83_F = BooleanOrOp.OrAverageConditional(vbool81_F, vBernoulli52);
			// Message to 'vbool83_marginal' from DerivedVariable factor
			this.vbool83_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool83_use_B, vbool83_F, this.vbool83_marginal_F);
			this.vbool84_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool85_F = default(Bernoulli);
			this.vbool85_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool85_use_B = Bernoulli.Uniform();
			// Message to 'vbool85' from Or factor
			vbool85_F = BooleanOrOp.OrAverageConditional(vbool83_F, vBernoulli52);
			// Message to 'vbool85_marginal' from DerivedVariable factor
			this.vbool85_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool85_use_B, vbool85_F, this.vbool85_marginal_F);
			this.vbool86_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool87_F = default(Bernoulli);
			this.vbool87_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool87_use_B = Bernoulli.Uniform();
			// Message to 'vbool87' from Or factor
			vbool87_F = BooleanOrOp.OrAverageConditional(vbool85_F, vBernoulli52);
			// Message to 'vbool87_marginal' from DerivedVariable factor
			this.vbool87_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool87_use_B, vbool87_F, this.vbool87_marginal_F);
			this.vbool88_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool89_F = default(Bernoulli);
			this.vbool89_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool89_use_B = Bernoulli.Uniform();
			// Message to 'vbool89' from Or factor
			vbool89_F = BooleanOrOp.OrAverageConditional(vbool87_F, vBernoulli52);
			// Message to 'vbool89_marginal' from DerivedVariable factor
			this.vbool89_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool89_use_B, vbool89_F, this.vbool89_marginal_F);
			this.vbool90_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool91_F = default(Bernoulli);
			this.vbool91_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool91_use_B = Bernoulli.Uniform();
			// Message to 'vbool91' from Or factor
			vbool91_F = BooleanOrOp.OrAverageConditional(vbool89_F, vBernoulli52);
			// Message to 'vbool91_marginal' from DerivedVariable factor
			this.vbool91_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool91_use_B, vbool91_F, this.vbool91_marginal_F);
			this.vbool92_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool93_F = default(Bernoulli);
			this.vbool93_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool93_use_B = Bernoulli.Uniform();
			// Message to 'vbool93' from Or factor
			vbool93_F = BooleanOrOp.OrAverageConditional(vbool91_F, vBernoulli52);
			// Message to 'vbool93_marginal' from DerivedVariable factor
			this.vbool93_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool93_use_B, vbool93_F, this.vbool93_marginal_F);
			this.vbool94_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool95_F = default(Bernoulli);
			this.vbool95_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool95_use_B = Bernoulli.Uniform();
			// Message to 'vbool95' from Or factor
			vbool95_F = BooleanOrOp.OrAverageConditional(vbool93_F, vBernoulli52);
			// Message to 'vbool95_marginal' from DerivedVariable factor
			this.vbool95_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool95_use_B, vbool95_F, this.vbool95_marginal_F);
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Constant();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vbool79") {
				return this.Vbool79Marginal();
			}
			if (variableName=="vbool80") {
				return this.Vbool80Marginal();
			}
			if (variableName=="vbool81") {
				return this.Vbool81Marginal();
			}
			if (variableName=="vbool82") {
				return this.Vbool82Marginal();
			}
			if (variableName=="vbool83") {
				return this.Vbool83Marginal();
			}
			if (variableName=="vbool84") {
				return this.Vbool84Marginal();
			}
			if (variableName=="vbool85") {
				return this.Vbool85Marginal();
			}
			if (variableName=="vbool86") {
				return this.Vbool86Marginal();
			}
			if (variableName=="vbool87") {
				return this.Vbool87Marginal();
			}
			if (variableName=="vbool88") {
				return this.Vbool88Marginal();
			}
			if (variableName=="vbool89") {
				return this.Vbool89Marginal();
			}
			if (variableName=="vbool90") {
				return this.Vbool90Marginal();
			}
			if (variableName=="vbool91") {
				return this.Vbool91Marginal();
			}
			if (variableName=="vbool92") {
				return this.Vbool92Marginal();
			}
			if (variableName=="vbool93") {
				return this.Vbool93Marginal();
			}
			if (variableName=="vbool94") {
				return this.Vbool94Marginal();
			}
			if (variableName=="vbool95") {
				return this.Vbool95Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool79' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool79Marginal()
		{
			return this.vbool79_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool80' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool80Marginal()
		{
			return this.vbool80_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool81' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool81Marginal()
		{
			return this.vbool81_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool82' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool82Marginal()
		{
			return this.vbool82_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool83' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool83Marginal()
		{
			return this.vbool83_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool84' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool84Marginal()
		{
			return this.vbool84_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool85' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool85Marginal()
		{
			return this.vbool85_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool86' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool86Marginal()
		{
			return this.vbool86_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool87' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool87Marginal()
		{
			return this.vbool87_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool88' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool88Marginal()
		{
			return this.vbool88_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool89' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool89Marginal()
		{
			return this.vbool89_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool90' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool90Marginal()
		{
			return this.vbool90_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool91' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool91Marginal()
		{
			return this.vbool91_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool92' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool92Marginal()
		{
			return this.vbool92_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool93' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool93Marginal()
		{
			return this.vbool93_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool94' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool94Marginal()
		{
			return this.vbool94_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool95' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool95Marginal()
		{
			return this.vbool95_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
