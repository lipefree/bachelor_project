// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 11:50 AM on Monday, December 5, 2022.
	/// </remarks>
	public partial class Model4_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'vbool36'</summary>
		public Bernoulli vbool36_marginal_F;
		/// <summary>Message to marginal of 'vbool37'</summary>
		public Bernoulli vbool37_marginal_F;
		/// <summary>Message to marginal of 'vbool38'</summary>
		public Bernoulli vbool38_marginal_F;
		/// <summary>Message to marginal of 'vbool39'</summary>
		public Bernoulli vbool39_marginal_F;
		/// <summary>Message to marginal of 'vbool40'</summary>
		public Bernoulli vbool40_marginal_F;
		/// <summary>Message to marginal of 'vbool41'</summary>
		public Bernoulli vbool41_marginal_F;
		/// <summary>Message to marginal of 'vbool42'</summary>
		public Bernoulli vbool42_marginal_F;
		/// <summary>Message to marginal of 'vbool43'</summary>
		public Bernoulli vbool43_marginal_F;
		/// <summary>Message to marginal of 'vbool44'</summary>
		public Bernoulli vbool44_marginal_F;
		/// <summary>Message to marginal of 'vbool45'</summary>
		public Bernoulli vbool45_marginal_F;
		/// <summary>Message to marginal of 'vbool46'</summary>
		public Bernoulli vbool46_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			Bernoulli vBernoulli26 = Bernoulli.FromLogOdds(double.NegativeInfinity);
			this.vbool36_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool36_use_B = Bernoulli.Uniform();
			// Message to 'vbool36_marginal' from Variable factor
			this.vbool36_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(vbool36_use_B, vBernoulli26, this.vbool36_marginal_F);
			Bernoulli vBernoulli27 = Bernoulli.Uniform();
			this.vbool37_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool38_F = default(Bernoulli);
			this.vbool38_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool38_use_B = Bernoulli.Uniform();
			// Message to 'vbool38' from Or factor
			vbool38_F = BooleanOrOp.OrAverageConditional(vBernoulli26, vBernoulli27);
			// Message to 'vbool38_marginal' from DerivedVariable factor
			this.vbool38_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool38_use_B, vbool38_F, this.vbool38_marginal_F);
			this.vbool39_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool40_F = default(Bernoulli);
			this.vbool40_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool40_use_B = Bernoulli.Uniform();
			// Message to 'vbool40' from Or factor
			vbool40_F = BooleanOrOp.OrAverageConditional(vbool38_F, vBernoulli27);
			// Message to 'vbool40_marginal' from DerivedVariable factor
			this.vbool40_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool40_use_B, vbool40_F, this.vbool40_marginal_F);
			this.vbool41_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool42_F = default(Bernoulli);
			this.vbool42_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool42_use_B = Bernoulli.Uniform();
			// Message to 'vbool42' from Or factor
			vbool42_F = BooleanOrOp.OrAverageConditional(vbool40_F, vBernoulli27);
			// Message to 'vbool42_marginal' from DerivedVariable factor
			this.vbool42_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool42_use_B, vbool42_F, this.vbool42_marginal_F);
			this.vbool43_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool44_F = default(Bernoulli);
			this.vbool44_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool44_use_B = Bernoulli.Uniform();
			// Message to 'vbool44' from Or factor
			vbool44_F = BooleanOrOp.OrAverageConditional(vbool42_F, vBernoulli27);
			// Message to 'vbool44_marginal' from DerivedVariable factor
			this.vbool44_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool44_use_B, vbool44_F, this.vbool44_marginal_F);
			this.vbool45_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool46_F = default(Bernoulli);
			this.vbool46_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool46_use_B = Bernoulli.Uniform();
			// Message to 'vbool46' from Or factor
			vbool46_F = BooleanOrOp.OrAverageConditional(vbool44_F, vBernoulli27);
			// Message to 'vbool46_marginal' from DerivedVariable factor
			this.vbool46_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool46_use_B, vbool46_F, this.vbool46_marginal_F);
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Constant();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vbool36") {
				return this.Vbool36Marginal();
			}
			if (variableName=="vbool37") {
				return this.Vbool37Marginal();
			}
			if (variableName=="vbool38") {
				return this.Vbool38Marginal();
			}
			if (variableName=="vbool39") {
				return this.Vbool39Marginal();
			}
			if (variableName=="vbool40") {
				return this.Vbool40Marginal();
			}
			if (variableName=="vbool41") {
				return this.Vbool41Marginal();
			}
			if (variableName=="vbool42") {
				return this.Vbool42Marginal();
			}
			if (variableName=="vbool43") {
				return this.Vbool43Marginal();
			}
			if (variableName=="vbool44") {
				return this.Vbool44Marginal();
			}
			if (variableName=="vbool45") {
				return this.Vbool45Marginal();
			}
			if (variableName=="vbool46") {
				return this.Vbool46Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool36' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool36Marginal()
		{
			return this.vbool36_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool37' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool37Marginal()
		{
			return this.vbool37_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool38' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool38Marginal()
		{
			return this.vbool38_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool39' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool39Marginal()
		{
			return this.vbool39_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool40' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool40Marginal()
		{
			return this.vbool40_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool41' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool41Marginal()
		{
			return this.vbool41_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool42' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool42Marginal()
		{
			return this.vbool42_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool43' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool43Marginal()
		{
			return this.vbool43_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool44' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool44Marginal()
		{
			return this.vbool44_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool45' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool45Marginal()
		{
			return this.vbool45_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool46' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool46Marginal()
		{
			return this.vbool46_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
