// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 11:50 AM on Monday, December 5, 2022.
	/// </remarks>
	public partial class Model6_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'vbool63'</summary>
		public Bernoulli vbool63_marginal_F;
		/// <summary>Message to marginal of 'vbool64'</summary>
		public Bernoulli vbool64_marginal_F;
		/// <summary>Message to marginal of 'vbool65'</summary>
		public Bernoulli vbool65_marginal_F;
		/// <summary>Message to marginal of 'vbool66'</summary>
		public Bernoulli vbool66_marginal_F;
		/// <summary>Message to marginal of 'vbool67'</summary>
		public Bernoulli vbool67_marginal_F;
		/// <summary>Message to marginal of 'vbool68'</summary>
		public Bernoulli vbool68_marginal_F;
		/// <summary>Message to marginal of 'vbool69'</summary>
		public Bernoulli vbool69_marginal_F;
		/// <summary>Message to marginal of 'vbool70'</summary>
		public Bernoulli vbool70_marginal_F;
		/// <summary>Message to marginal of 'vbool71'</summary>
		public Bernoulli vbool71_marginal_F;
		/// <summary>Message to marginal of 'vbool72'</summary>
		public Bernoulli vbool72_marginal_F;
		/// <summary>Message to marginal of 'vbool73'</summary>
		public Bernoulli vbool73_marginal_F;
		/// <summary>Message to marginal of 'vbool74'</summary>
		public Bernoulli vbool74_marginal_F;
		/// <summary>Message to marginal of 'vbool75'</summary>
		public Bernoulli vbool75_marginal_F;
		/// <summary>Message to marginal of 'vbool76'</summary>
		public Bernoulli vbool76_marginal_F;
		/// <summary>Message to marginal of 'vbool77'</summary>
		public Bernoulli vbool77_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			Bernoulli vBernoulli42 = Bernoulli.FromLogOdds(double.NegativeInfinity);
			this.vbool63_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool63_use_B = Bernoulli.Uniform();
			// Message to 'vbool63_marginal' from Variable factor
			this.vbool63_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(vbool63_use_B, vBernoulli42, this.vbool63_marginal_F);
			Bernoulli vBernoulli43 = Bernoulli.Uniform();
			this.vbool64_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool65_F = default(Bernoulli);
			this.vbool65_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool65_use_B = Bernoulli.Uniform();
			// Message to 'vbool65' from Or factor
			vbool65_F = BooleanOrOp.OrAverageConditional(vBernoulli42, vBernoulli43);
			// Message to 'vbool65_marginal' from DerivedVariable factor
			this.vbool65_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool65_use_B, vbool65_F, this.vbool65_marginal_F);
			this.vbool66_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool67_F = default(Bernoulli);
			this.vbool67_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool67_use_B = Bernoulli.Uniform();
			// Message to 'vbool67' from Or factor
			vbool67_F = BooleanOrOp.OrAverageConditional(vbool65_F, vBernoulli43);
			// Message to 'vbool67_marginal' from DerivedVariable factor
			this.vbool67_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool67_use_B, vbool67_F, this.vbool67_marginal_F);
			this.vbool68_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool69_F = default(Bernoulli);
			this.vbool69_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool69_use_B = Bernoulli.Uniform();
			// Message to 'vbool69' from Or factor
			vbool69_F = BooleanOrOp.OrAverageConditional(vbool67_F, vBernoulli43);
			// Message to 'vbool69_marginal' from DerivedVariable factor
			this.vbool69_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool69_use_B, vbool69_F, this.vbool69_marginal_F);
			this.vbool70_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool71_F = default(Bernoulli);
			this.vbool71_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool71_use_B = Bernoulli.Uniform();
			// Message to 'vbool71' from Or factor
			vbool71_F = BooleanOrOp.OrAverageConditional(vbool69_F, vBernoulli43);
			// Message to 'vbool71_marginal' from DerivedVariable factor
			this.vbool71_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool71_use_B, vbool71_F, this.vbool71_marginal_F);
			this.vbool72_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool73_F = default(Bernoulli);
			this.vbool73_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool73_use_B = Bernoulli.Uniform();
			// Message to 'vbool73' from Or factor
			vbool73_F = BooleanOrOp.OrAverageConditional(vbool71_F, vBernoulli43);
			// Message to 'vbool73_marginal' from DerivedVariable factor
			this.vbool73_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool73_use_B, vbool73_F, this.vbool73_marginal_F);
			this.vbool74_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool75_F = default(Bernoulli);
			this.vbool75_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool75_use_B = Bernoulli.Uniform();
			// Message to 'vbool75' from Or factor
			vbool75_F = BooleanOrOp.OrAverageConditional(vbool73_F, vBernoulli43);
			// Message to 'vbool75_marginal' from DerivedVariable factor
			this.vbool75_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool75_use_B, vbool75_F, this.vbool75_marginal_F);
			this.vbool76_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool77_F = default(Bernoulli);
			this.vbool77_marginal_F = Bernoulli.Uniform();
			Bernoulli vbool77_use_B = Bernoulli.Uniform();
			// Message to 'vbool77' from Or factor
			vbool77_F = BooleanOrOp.OrAverageConditional(vbool75_F, vBernoulli43);
			// Message to 'vbool77_marginal' from DerivedVariable factor
			this.vbool77_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(vbool77_use_B, vbool77_F, this.vbool77_marginal_F);
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Constant();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vbool63") {
				return this.Vbool63Marginal();
			}
			if (variableName=="vbool64") {
				return this.Vbool64Marginal();
			}
			if (variableName=="vbool65") {
				return this.Vbool65Marginal();
			}
			if (variableName=="vbool66") {
				return this.Vbool66Marginal();
			}
			if (variableName=="vbool67") {
				return this.Vbool67Marginal();
			}
			if (variableName=="vbool68") {
				return this.Vbool68Marginal();
			}
			if (variableName=="vbool69") {
				return this.Vbool69Marginal();
			}
			if (variableName=="vbool70") {
				return this.Vbool70Marginal();
			}
			if (variableName=="vbool71") {
				return this.Vbool71Marginal();
			}
			if (variableName=="vbool72") {
				return this.Vbool72Marginal();
			}
			if (variableName=="vbool73") {
				return this.Vbool73Marginal();
			}
			if (variableName=="vbool74") {
				return this.Vbool74Marginal();
			}
			if (variableName=="vbool75") {
				return this.Vbool75Marginal();
			}
			if (variableName=="vbool76") {
				return this.Vbool76Marginal();
			}
			if (variableName=="vbool77") {
				return this.Vbool77Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool63' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool63Marginal()
		{
			return this.vbool63_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool64' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool64Marginal()
		{
			return this.vbool64_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool65' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool65Marginal()
		{
			return this.vbool65_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool66' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool66Marginal()
		{
			return this.vbool66_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool67' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool67Marginal()
		{
			return this.vbool67_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool68' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool68Marginal()
		{
			return this.vbool68_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool69' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool69Marginal()
		{
			return this.vbool69_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool70' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool70Marginal()
		{
			return this.vbool70_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool71' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool71Marginal()
		{
			return this.vbool71_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool72' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool72Marginal()
		{
			return this.vbool72_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool73' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool73Marginal()
		{
			return this.vbool73_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool74' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool74Marginal()
		{
			return this.vbool74_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool75' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool75Marginal()
		{
			return this.vbool75_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool76' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool76Marginal()
		{
			return this.vbool76_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool77' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool77Marginal()
		{
			return this.vbool77_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
